Ref : https://www.edureka.co/blog/jenkins-pipeline-tutorial-continuous-delivery
Git repo forked from : https://github.com/Zulaikha12/git-test

First Job
New Item -> pipeline -> demo1
Pipeline -> pipeline script from SCM (declarative pipeline)
	GIT : https://github.com/puneetbhatia77/git-test.git
	Script Path : Jenkinsfile.txt

-----------------------------------------------------------------------------

Second Job
New Item -> pipeline -> demo2
Pipeline -> pipeline script from SCM (declarative pipeline)
	GIT : https://github.com/puneetbhatia77/git-test.git
	Script Path : Jenkinsfile

pipeline {
    agent any
    stages {
        stage('One') {
                steps {
                        echo 'Hi, this is Puneet from edureka'
			
                }
        }
	    stage('Two'){
		    
		steps {
			input('Do you want to proceed?')
        }
	    }
        stage('Three') {
                when {
                        not {
                                branch "master"
                        }
                }
                steps {
			echo "Hello"
                        }
        }
        stage('Four') {
                parallel {
                        stage('Unit Test') {
                                steps{
                                        echo "Running the unit test..."
                                }
                        }
                        stage('Integration test') {
                        agent {
                                docker {                                                                                                       		# make sure docker is installed on VM and add jenkins user to docker group.
                                        reuseNode false				 		# sudo usermod -aG docker jenkins
					image 'ubuntu'			# sudo usermod -aG docker vagrant  and then restart jenkins to take effect
                                        }								#       reuseNode , a boolean, false by default. If true, run the container on the node specified at the top-level of the Pipeline,
			}						#      in the same workspace, rather than on a new node entirely.
				steps {
					echo 'Running the integration test..'
				}
                               
			}  }
        }
    }
}




-------------------------------------------------------------------------------
Third Job
New Item -> pipeline -> Scripted Pipeline Demo
Pipeline -> pipeline script

node {
      
	for (i=0; i<2; i++) { 
           
		stage "Stage #"+i
           
		print 'Hello, world !'
          
		if (i==0)
           
		{
               
			echo 'Running on Stage #0'
          
		 }
           
		else {
               
			build 'demo1'
              
			 echo 'Running on Stage #1'
           
		}
      
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Forth Job

New Item -> pipeline -> maven-jdk-hello
Pipeline -> pipeline script from SCM (declarative pipeline)
	GIT : https://github.com/puneetbhatia77/git-test.git
	Script Path : maven-jdk-hello

pipeline {
    agent none 
    stages {
        stage('Example Build') {
            agent { docker 'maven:3-alpine' } 
            steps {
                echo 'Hello, Maven'
                sh 'mvn --version'
            }
        }
        stage('Example Test') {
            agent { docker 'openjdk:8-jre' }                    # can also be tested at terminal by tunning the command " sudo docker run -it openjdk:8-jre bash" and " java -version"
            steps {
                echo 'Hello, JDK'
                sh 'java -version'
            }
        }
    }
}

-------------------------------------------------------------------------
NOT TO USE : system hangs as it sonarqube require more resources

Ref : https://github.com/puneetbhatia77/jenkins-pipeline/blob/master/README.md

Fifth Job : https://github.com/puneetbhatia77/jenkins-pipeline

New Item -> pipeline -> jenkinspipelinesonar                               # Increase VM size to 2 GB as services like sonarqube takes more memory.









# sudo apt install openjdk-8-jdk    to install jdk

docker run -it <image id> &
docker start <container id>
docker exec -it <container id> /bin/bash

After login, run   

bash-4.3#    curl -i localhost:8090

HTTP/1.1 200
Content-Type: text/html;charset=UTF-8
Content-Language: en-US
Transfer-Encoding: chunked
Date: Thu, 13 Dec 2018 05:25:40 GMT

<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Using Dockerizing Jenkins Pipeline</title>
</head>
<body>

<h1>Welcome to Dockerizing Jenkins Pipeline Tutorial</h1>
<p>Triggering a Jenkins build from a push to Github.</p>


</body>
</html>

bash-4.3#




sudo docker run -d -p 9090:8090 jenkins-pipeline           #within VM
192.168.56.101:9090                                                     #from windows host machine to access container
